generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Provider {
  GOOGLE
  EMAIL
}

model User {
  id         String   @id @default(uuid())
  email      String?  @unique
  password   String?
  isVerified Boolean  @default(false)
  name       String?
  profile    String?
  publicId   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  token      String?

  accounts    Account[]
  projects    Project[]
  comments    Comment[]
  activityLog ActivityLog[]
  labels      Label[]
}

model Account {
  id                String   @id @default(uuid())
  provider          Provider
  providerAccountId String?
  userId            String?
  user              User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken       String?
  refreshToken      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Project {
  id          String        @id @default(uuid())
  name        String
  userId      String?
  User        User?         @relation(fields: [userId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  activityLog ActivityLog[]
  categories  Category[]
}

model Category {
  id        String  @id @default(uuid())
  title     String
  tasks     Task[]
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
}

model Task {
  id          String        @id @default(uuid())
  name        String
  description String
  priority    String
  isCompleted Boolean       @default(false)
  categoryId  String
  category    Category      @relation(fields: [categoryId], references: [id])
  labelId     String?
  label       Label?        @relation(fields: [labelId], references: [id])
  comments    Comment[]
  activityLog ActivityLog[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Label {
  id          String        @id @default(uuid())
  name        String
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  tasks       Task[]
  activityLog ActivityLog[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Comment {
  id          String        @id @default(uuid())
  content     String
  taskId      String
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id])
  task        Task          @relation(fields: [taskId], references: [id])
  activityLog ActivityLog[]
}

model ActivityLog {
  id          String   @id @default(uuid())
  action      ACTIONS
  description String?
  userId      String?
  taskId      String?
  labelId     String?
  projectId   String?
  commentId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id])
  task        Task?    @relation(fields: [taskId], references: [id])
  label       Label?   @relation(fields: [labelId], references: [id])
  project     Project? @relation(fields: [projectId], references: [id])
  comment     Comment? @relation(fields: [commentId], references: [id])
}

enum ACTIONS {
  CREATE_PROJECT
  UPDATE_PROJECT
  DELETE_PROJECT
  CREATE_CATEGORY
  UPDATE_CATEGORY
  DELETE_CATEGORY
  CREATE_TASK
  UPDATE_TASK
  DELETE_TASK
  CREATE_LABEL
  UPDATE_LABEL
  DELETE_LABEL
  CREATE_COMMENT
  UPDATE_COMMENT
  DELETE_COMMENT
}
